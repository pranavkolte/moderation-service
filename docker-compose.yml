services:
  web:
    build: .
    container_name: moderation_web
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - moderation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: moderation_celery
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - rabbitmq
      - redis
    networks:
      - moderation_network

  db:
    image: postgres:17.2-alpine
    container_name: moderation_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - moderation_network

  redis:
    image: redis:latest
    container_name: moderation_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - moderation_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: moderation_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - moderation_network

networks:
  moderation_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  static_volume:
  media_volume:
